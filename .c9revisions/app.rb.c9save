{"ts":1369691100949,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"# Require the bundler gem and then call Bundler.require to load in all gems\n# listed in Gemfile.\nrequire 'bundler'\nBundler.require\n\n# Setup DataMapper with a database URL. On Heroku, ENV['DATABASE_URL'] will be\n# set, when working locally this line will fall back to using SQLite in the\n# current directory.\nDataMapper.setup(:default, ENV['DATABASE_URL'] || \"sqlite://#{Dir.pwd}/development.sqlite\")\n\n# Define a simple DataMapper model.\nclass Thing\n  include DataMapper::Resource\n\n  property :id, Serial, :key => true\n  property :created_at, DateTime\n  property :title, String, :length => 255\n  property :description, Text\nend\n\n# Finalize the DataMapper models.\nDataMapper.finalize\n\n# Tell DataMapper to update the database according to the definitions above.\nDataMapper.auto_upgrade!\n\nget '/' do\n  send_file './public/index.html'\nend\n\n# Route to show all Things, ordered like a blog\nget '/things' do\n  content_type :json\n  @things = Thing.all(:order => :created_at.desc)\n\n  @things.to_json\nend\n\n# CREATE: Route to create a new Thing\npost '/things' do\n  content_type :json\n\n  # These next commented lines are for if you are using Backbone.js\n  # JSON is sent in the body of the http request. We need to parse the body\n  # from a string into JSON\n  # params_json = JSON.parse(request.body.read)\n\n  # If you are using jQuery's ajax functions, the data goes through in the\n  # params.\n  @thing = Thing.new(params)\n\n  if @thing.save\n    @thing.to_json\n  else\n    halt 500\n  end\nend\n\n# READ: Route to show a specific Thing based on its `id`\nget '/things/:id' do\n  content_type :json\n  @thing = Thing.get(params[:id])\n\n  if @thing\n    @thing.to_json\n  else\n    halt 404\n  end\nend\n\n# UPDATE: Route to update a Thing\nput '/things/:id' do\n  content_type :json\n\n  # These next commented lines are for if you are using Backbone.js\n  # JSON is sent in the body of the http request. We need to parse the body\n  # from a string into JSON\n  # params_json = JSON.parse(request.body.read)\n\n  # If you are using jQuery's ajax functions, the data goes through in the\n  # params.\n\n  @thing = Thing.get(params[:id])\n  @thing.update(params)\n\n  if @thing.save\n    @thing.to_json\n  else\n    halt 500\n  end\nend\n\n# DELETE: Route to delete a Thing\ndelete '/things/:id/delete' do\n  content_type :json\n  @thing = Thing.get(params[:id])\n\n  if @thing.destroy\n    {:success => \"ok\"}.to_json\n  else\n    halt 500\n  end\nend\n\n# If there are no Things in the database, add a few.\nif Thing.count == 0\n  Thing.create(:title => \"Test Thing One\", :description => \"Sometimes I eat pizza.\")\n  Thing.create(:title => \"Test Thing Two\", :description => \"Other times I eat cookies.\")\nend"]],"start1":0,"start2":0,"length1":0,"length2":2640}]],"length":2640}
{"contributors":[],"silentsave":false,"ts":1369696877663,"patch":[[{"diffs":[[0,"hing.new"],[1,"#"],[0,"(params)"],[1,"\n  @thing.title = params[:title]\n  @think.description = params[:description]"],[0,"\n\n  if @"]],"start1":1394,"start2":1394,"length1":24,"length2":101}]],"length":2717,"saved":false}
{"ts":1369696938991,"patch":[[{"diffs":[[0,"\n  @thin"],[-1,"k"],[1,"g"],[0,".descrip"]],"start1":1443,"start2":1443,"length1":17,"length2":17}]],"length":2717,"saved":false}
{"ts":1369697001719,"patch":[[{"diffs":[[0," params["],[-1,":"],[1,"\""],[0,"title"],[1,"\""],[0,"]\n  @thi"]],"start1":1428,"start2":1428,"length1":22,"length2":23},{"diffs":[[0," params["],[-1,":"],[1,"\""],[0,"descript"]],"start1":1467,"start2":1467,"length1":17,"length2":17},{"diffs":[[0,"cription"],[1,"\""],[0,"]\n\n  if "]],"start1":1479,"start2":1479,"length1":16,"length2":17}]],"length":2719,"saved":false}
{"ts":1369697103070,"patch":[[{"diffs":[[0,"params)\n"],[1,"  binding.pry\n"],[0,"  @thing"]],"start1":1404,"start2":1404,"length1":16,"length2":30}]],"length":2733,"saved":false}
{"ts":1369697451046,"patch":[[{"diffs":[[0,"undler'\n"],[1,"require 'pry'\n"],[0,"Bundler."]],"start1":107,"start2":107,"length1":16,"length2":30}]],"length":2747,"saved":false}
{"ts":1369697948373,"patch":[[{"diffs":[[0,"ring into JSON\n "],[-1," #"],[0," params_json = J"]],"start1":1245,"start2":1245,"length1":34,"length2":32},{"diffs":[[0,"hing.new"],[-1,"#"],[0,"(params)"]],"start1":1406,"start2":1406,"length1":17,"length2":16},{"diffs":[[0,".pry"],[-1,"\n  @thing.title = params[\"title\"]\n  @thing.description = params[\"description\"]"],[0,"\n\n  "]],"start1":1432,"start2":1432,"length1":86,"length2":8}]],"length":2666,"saved":false}
{"ts":1369698015960,"patch":[[{"diffs":[[0,"params.\n"],[1,"  binding.pry\n"],[0,"  @thing"]],"start1":1386,"start2":1386,"length1":16,"length2":30},{"diffs":[[0,"rams)\n  "],[-1,"binding.pry"],[0,"\n\n  if @"]],"start1":1431,"start2":1431,"length1":27,"length2":16}]],"length":2669,"saved":false}
{"ts":1369698097890,"patch":[[{"diffs":[[0,"ms.\n"],[-1,"  binding.pry\n"],[0,"  @t"]],"start1":1390,"start2":1390,"length1":22,"length2":8},{"diffs":[[0,"w(params"],[1,"_json"],[0,")\n  \n\n  "]],"start1":1413,"start2":1413,"length1":16,"length2":21}]],"length":2660,"saved":false}
{"contributors":[],"silentsave":false,"ts":1369767368000,"patch":[[{"diffs":[[0,"re '"],[-1,"pry'\nBundler.require"],[1,"sinatra/cross_origin'\nBundler.require\n\nset :allow_origin, :any"],[0,"\n\n# "]],"start1":120,"start2":120,"length1":28,"length2":70}]],"length":2702,"saved":false}
{"ts":1369767509239,"patch":[[{"diffs":[[0,"in, :any"],[1,"\nset :allow_methods, [:post, :get, :put, :delete, :options]"],[0,"\n\n# Setu"]],"start1":178,"start2":178,"length1":16,"length2":75}]],"length":2761,"saved":false}
